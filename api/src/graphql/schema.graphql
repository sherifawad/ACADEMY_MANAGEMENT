### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AppDomain {
  createdAt: DateTime
  description: String
  id: Int
  name: String
  roles: [UserRole]
  updatedAt: DateTime
}

type Attendance {
  createdBy: String
  endAt: DateTime
  group: Group
  id: String
  note: String
  profile: Profile
  profileId: String
  startAt: DateTime
  updatedBy: String
}

type AttendanceResponse {
  list: [Attendance]
  nextCursor: String
  prevCursor: String
  totalCount: AttendancesCount
}

type AttendancesCUResponse {
  count: Int
}

type AttendancesCount {
  _count: Int
}

type Contact {
  address: String
  email: String
  emailConfirmed: Boolean
  id: String
  note: String
  parentsPhones: String
  phone: String
}

type Count {
  _count: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Exam {
  createdAt: DateTime
  createdBy: String
  date: DateTime
  id: String
  note: String
  profile: Profile
  profileId: String
  score: Float
  updatedAt: DateTime
  updatedBy: String
}

type ExamCUResponse {
  count: Int
}

type ExamsCount {
  _count: Int
}

type ExamsResponse {
  list: [Exam]
  nextCursor: String
  prevCursor: String
  totalCount: ExamsCount
}

type Family {
  createdAt: DateTime
  createdBy: String
  familyName: String
  id: String!
  updatedAt: DateTime
  updatedBy: String
  users: [User]
}

type Grade {
  createdAt: DateTime
  createdBy: String
  groups: [Group]
  id: String!
  isActive: Boolean
  name: String
  profiles: [Profile]
  updatedAt: DateTime
  updatedBy: String
}

type Group {
  attendance: [Attendance]
  createdAt: DateTime
  createdBy: String
  endAt: DateTime
  grade: Grade
  id: String
  isActive: Boolean
  name: String
  profiles(data: PaginationInputType): ProfilesResponse
  startAt: DateTime
  updatedAt: DateTime
  updatedBy: String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAttendance(endAt: DateTime, note: String, profileId: String!, startAt: DateTime!): Attendance!
  createContact(address: String!, email: String, note: String, parentsPhones: String, phone: String!): Contact!
  createDomain(description: String, name: String!): AppDomain!
  createExam(date: DateTime!, note: String, profileId: String!, score: Float!): Exam!
  createFamily(familyName: String!): Family!
  createGrade(isActive: Boolean!, name: String!): Grade!
  createGroup(endAt: DateTime, gradeId: String, isActive: Boolean, name: String!, startAt: DateTime): Group!
  createMultipleAttendance(endAt: DateTime, note: String, profileIds: [String!]!, startAt: DateTime!): AttendancesCUResponse
  createMultipleExam(date: DateTime!, note: String, profileIds: [String!], score: Float, studentsAndScores: JSONObject): ExamCUResponse
  createPermission(description: String, name: String!): UserPermission!
  createProfile(bio: String, id: String!): Profile!
  createRole(description: String, name: String!): UserRole!
  deleteAttendance(id: String!): Attendance!
  deleteContact(id: String!): Contact!
  deleteDomain(domainId: Int!): AppDomain!
  deleteExam(id: String!): Exam!
  deleteFamily(id: String!): Family!
  deleteGrade(id: String!): Grade!
  deleteGroup(id: String!): Group!
  deletePermission(permissionId: Int!): UserPermission!
  deleteProfile(id: String!): Profile!
  deleteRole(roleId: Int!): UserRole!
  updateAttendance(endAt: DateTime, id: String!, note: String, profileId: String, startAt: DateTime): Attendance!
  updateContact(address: String, contactId: String!, email: String, emailConfirmed: Boolean, note: String, parentsPhones: String, phone: String): Contact!
  updateDomain(description: String, domainId: Int!, name: String): AppDomain!
  updateExam(date: DateTime, id: String!, note: String, score: Float): Exam!
  updateFamily(familyName: String!, id: String!): Family!
  updateGrade(id: String!, isActive: Boolean!, name: String!): Grade!
  updateGroup(endAt: DateTime, gradeId: String, id: String!, isActive: Boolean, name: String, startAt: DateTime): Group!
  updateMultipleAttendance(endAt: DateTime, endAtCondition: DateTime, note: String, noteCondition: String, profileIds: [String!]!, startAt: DateTime, startAtCondition: DateTime!): AttendancesCUResponse!
  updateMultipleExam(date: DateTime, dateCondition: DateTime!, note: String, noteCondition: DateTime, profileIds: [String!]!, score: Float, scoreCondition: Float): ExamCUResponse!
  updatePermission(description: String, name: String, permissionId: Int!): UserPermission!
  updateProfile(bio: String, id: String!): Profile!
  updateRole(description: String, domainPermissions: [JSONObject], name: String, roleId: Int!): UserRole!
  userRegister(address: String, avatar: String, email: String, familyId: String, familyListIds: [String], familyName: String, groupId: String, name: String!, parentsPhones: String, password: String!, phone: String, roleId: Int!): User!
  userUpdate(address: String, avatar: String, email: String, familyName: String, groupId: String, id: String!, name: String, parentsPhones: String, password: String, phone: String, roleId: Int): User!
}

type PageCursor {
  cursor: String
  isCurrent: Boolean
  page: Int
}

input PaginationInputType {
  myCursor: String
  orderByKey: String
  orderDirection: String
  skip: Int
  sort: [JSONObject]
  take: Int!
}

type Profile {
  attendances(orderByList: JSONObject, take: Int): [Attendance]
  bio: String
  createdAt: DateTime
  createdBy: String
  exams(orderByList: JSONObject, take: Int): [Exam]
  group: Group
  id: String
  updatedAt: DateTime
  updatedBy: String
  user: User
}

type ProfilesResponse {
  list: [Profile]
  nextCursor: String
  prevCursor: String
  totalCount: Count
}

type Query {
  ActiveGrades: [Grade]!
  AttendanceInDate(date: DateTime!, id: String!): Attendance!
  Attendances(skip: Int, studentId: String!, take: Int): [Attendance]
  AttendancesCount(studentId: String!): AttendancesCount
  Contact(contactId: String!): Contact!
  Exam(id: String!): Exam!
  Exams: [Exam]!
  FilteredUsers(data: PaginationInputType, familyName: String, family_Id: String, isActive: Boolean, roleId: Int): UsersResponse
  FilteredUsersByPhoneQuery(phones: [String]!, roleId: Int!): [User]
  Grade(id: String!): Grade!
  Grades: [Grade]!
  Group(id: String!): Group!
  Groups: [Group]!
  Profile(id: String!): Profile!
  Profiles: [Profile]!
  SExams(data: PaginationInputType, studentId: String!): ExamsResponse
  User(id: String!, take: Int): User!
  Users: [User]
  domain(domainId: Int!): [AppDomain]
  domains: [AppDomain]
  family(id: String!): Family!
  permission(permissionId: Int!): [UserPermission]
  permissions: [UserPermission]
  role(roleId: Int!): UserRole
  roles: [UserRole]
  studentAttendances(data: PaginationInputType, studentId: String!): AttendanceResponse
  studentsGroup(data: PaginationInputType, groupId: String!, isActive: Boolean): StudentsResponse
}

type Role_Domain_Permission {
  domain: AppDomain
  id: Int
  permission: UserPermission
  role: UserRole
}

type StudentsResponse {
  groupName: String
  students: UsersResponse
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

type User {
  avatar: String
  contact: Contact
  createdAt: DateTime
  family: Family
  familyId: String
  id: String
  isActive: Boolean
  name: String
  profile: Profile
  role: UserRole
  updatedAt: DateTime
}

type UserPermission {
  createdAt: DateTime
  description: String
  id: Int
  name: String
  roles: [UserRole]
  updatedAt: DateTime
}

type UserRole {
  Role_Domain_Permission: [Role_Domain_Permission]
  createdAt: DateTime
  description: String
  id: Int
  name: String
  updatedAt: DateTime
  users: [User]
}

type UsersCount {
  _count: Int
}

input UsersFilterInputType {
  StudentId: String
  familyId: String
  isActive: Boolean
  rolesIdsList: [Int]
}

type UsersResponse {
  list: [User]
  nextCursor: String
  prevCursor: String
  totalCount: UsersCount
}

type pageCursors {
  around: [PageCursor]
  first: PageCursor
  last: PageCursor
  next: PageCursor
  previous: PageCursor
}

type pageEdges {
  cursor: String
  node: Attendance
}
